{{/* Base template structure */}}
{
  "log": {
    "loglevel": "{{.LogLevel}}"
  },
  "inbounds": [
    {{- range $index, $proxy := .Proxies }}
    {{- if ne $index 0 }},{{ end }}
    {
      "listen": "127.0.0.1",
      "port": {{ add $.StartPort $proxy.Index }},
      "protocol": "socks",
      "tag": "{{$proxy.Name}}_{{$proxy.Protocol}}_{{$proxy.Index}}_Inbound",
      "sniffing": {
        "enabled": true,
        "destOverride": ["http", "tls", "quic"],
        "routeOnly": true
      },
      "settings": {
        "auth": "noauth",
        "udp": true,
        "userLevel": 0
      }
    }
    {{- end }}
  ],
  "outbounds": [
    {{- template "default_outbounds" . -}}
    {{- range $proxy := .Proxies }},
    {
      "tag": "{{$proxy.Name}}_{{$proxy.Index}}",
      "protocol": "{{$proxy.Protocol}}",
      {{- template "outbound_core" $proxy }}
    }
    {{- end }}
  ],
  "routing": {
    "domainStrategy": "AsIs",
    "rules": [
      {
        "type": "field",
        "protocol": ["dns"],
        "outboundTag": "dns-out"
      }
      {{- range $proxy := .Proxies }},
      {
        "type": "field",
        "inboundTag": ["{{$proxy.Name}}_{{$proxy.Protocol}}_{{$proxy.Index}}_Inbound"],
        "outboundTag": "{{$proxy.Name}}_{{$proxy.Index}}"
      }
      {{- end }}
    ]
  }
}

{{/* Default outbounds template */}}
{{- define "default_outbounds" -}}
{
  "tag": "direct",
  "protocol": "freedom",
  "settings": {
    "domainStrategy": "UseIP"
  },
  "streamSettings": {
    "sockopt": {}
  }
},
{
  "tag": "block",
  "protocol": "blackhole",
  "settings": {}
},
{
  "tag": "dns-out",
  "protocol": "dns",
  "settings": {
    "address": "1.1.1.1",
    "network": "udp",
    "port": 53
  },
  "streamSettings": {
    "sockopt": {}
  }
}
{{- end }}

{{/* Core outbound template combining settings and stream settings */}}
{{- define "outbound_core" }}
  "settings": {
    {{- if eq .Protocol "vmess" }}
    "vnext": [{
      "address": "{{.Server}}",
      "port": {{.Port}},
      "users": [{
        "id": "{{.UUID}}",
        "alterId": {{.GetAlterId}},
        "security": "{{.GetVMessSecurity}}",
        "level": {{.GetUserLevel}}
      }]
    }]
    {{- else if eq .Protocol "vless" }}
    "vnext": [{
      "address": "{{.Server}}",
      "port": {{.Port}},
      "users": [{
        "id": "{{.UUID}}",
        "encryption": "none",
        "level": {{.GetUserLevel}}
        {{- if .Flow }},
        "flow": "{{.Flow}}"
        {{- end }}
      }]
    }]
    {{- else if eq .Protocol "trojan" }}
    "servers": [{
      "address": "{{.Server}}",
      "port": {{.Port}},
      "password": "{{.Password}}"
      {{- if .Flow }},
      "flow": "{{.Flow}}"
      {{- end }}
    }]
    {{- else if eq .Protocol "shadowsocks" }}
    "servers": [{
      "address": "{{.Server}}",
      "port": {{.Port}},
      "method": "{{.Method}}",
      "password": "{{.Password}}"
    }]
    {{- end }}
  },
  "streamSettings": {
    {{- if .Type }}
    "network": "{{.Type}}",
    {{- else }}
    "network": "tcp",
    {{- end }}
    {{- if .Security }}
    "security": "{{.Security}}"
    {{- else }}
    "security": "none"
    {{- end }}

    {{- if and .Security (eq .Security "tls") }},
    "tlsSettings": {
      "serverName": "{{.SNI}}",
      "allowInsecure": {{.AllowInsecure}},
      "fingerprint": "{{.Fingerprint}}"
      {{- if .ALPN }},
      "alpn": {{.GetALPNSettings | toJson}}
      {{- end }}
    }
    {{- end }}

    {{- if and .Security (eq .Security "reality") }},
    "realitySettings": {
      "serverName": "{{.SNI}}",
      "fingerprint": "{{.Fingerprint}}",
      "publicKey": "{{.PublicKey}}",
      "shortId": "{{.ShortID}}"
    }
    {{- end }}

    {{- if and .Type (eq .Type "ws") }},
    "wsSettings": {
      "path": "{{.Path}}",
      "host": "{{.Host}}",
      "headers": {
        "Host": "{{.Host}}"
      }
    }
    {{- end }}

    {{- if and .Type (eq .Type "httpupgrade") }},
    "httpupgradeSettings": {
      "path": "{{.Path}}"
      {{- if .Host }},
      "host": "{{.Host}}"
      {{- end }}
    }
    {{- end }}

    {{- if and .Type (eq .Type "xhttp") }},
    "xhttpSettings": {
      "host": "{{.Host}}",
      "path": "{{.Path}}",
      {{- if .ExtraXhttp }}
      "extra": {{.ExtraXhttp}},
      {{- end }}
      "mode": "{{.Mode}}"
    }
    {{- end }}

    {{- if .HasGRPCSettings }},
    "grpcSettings": {
      "serviceName": "{{.GetServiceName}}",
      "multiMode": {{.MultiMode}}
      {{- if gt .IdleTimeout 0 }},
      "idle_timeout": {{.IdleTimeout}}
      {{- end }}
      {{- if gt .WindowsSize 0 }},
      "initial_windows_size": {{.WindowsSize}}
      {{- end }}
    }
    {{- end }},
    
    "sockopt": {}
  }
{{- end }}